/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FactoryPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/PromiseConfirmModal.ts
var import_obsidian = require("obsidian");
var PromiseConfirmModal = class extends import_obsidian.Modal {
  constructor(app, message) {
    super(app);
    this.message = message;
  }
  resolvePromise = () => void 0;
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("p", { text: this.message });
    new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("\u0414\u0430").setCta().onClick(() => {
        this.resolvePromise(true);
        this.close();
      })
    ).addButton(
      (btn) => btn.setButtonText("\u041D\u0435\u0442").onClick(() => {
        this.resolvePromise(false);
        this.close();
      })
    );
  }
  async openAndWait() {
    return new Promise((resolve) => {
      this.resolvePromise = resolve;
      this.open();
    });
  }
  onClose() {
    this.contentEl.empty();
    if (this.resolvePromise) {
      this.resolvePromise(false);
    }
  }
};

// src/main.ts
var FactoryPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (isMarkdownFile(file)) {
          menu.addItem((item) => {
            item.setTitle("Create Child Note").setIcon("git-branch-plus").onClick(() => console.log("Hello!"));
          });
        }
        if (isDesktopCanvasFile(file)) {
          menu.addItem((item) => {
            item.setTitle("Clear Desktop").setIcon("square-x").onClick(() => clearCanvas(file, this.app));
          });
        }
      })
    );
  }
};
function isMarkdownFile(file) {
  return file instanceof import_obsidian2.TFile && file.extension === "md";
}
function isDesktopCanvasFile(file) {
  return file instanceof import_obsidian2.TFile && file.path === "Desktop.canvas";
}
async function clearCanvas(canvasFile, app) {
  const modal = new PromiseConfirmModal(app, "Do you want to clear desktop?");
  const confirmed = await modal.openAndWait();
  if (confirmed) {
    const emptyCanvas = {
      nodes: [],
      edges: []
    };
    await app.vault.modify(canvasFile, JSON.stringify(emptyCanvas, null, 2));
  }
}
